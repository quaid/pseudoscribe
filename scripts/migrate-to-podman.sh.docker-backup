#!/bin/bash

# Docker to Podman Migration Script
# Replaces all Docker references with Podman equivalents across the codebase

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to replace Docker commands with Podman equivalents
replace_docker_commands() {
    local file="$1"
    local backup_file="${file}.docker-backup"
    
    # Create backup
    cp "$file" "$backup_file"
    
    # Replace docker commands with podman
    sed -i '' 's/docker-compose/podman-compose/g' "$file"
    sed -i '' 's/\bdocker\b/podman/g' "$file"
    
    # Update environment variables
    sed -i '' 's/DOCKER_COMPOSE/PODMAN_COMPOSE/g' "$file"
    sed -i '' 's/DOCKER_BUILDKIT/BUILDAH_FORMAT/g' "$file"
    
    log_info "Updated $file (backup: $backup_file)"
}

# Function to update compose files for podman
update_compose_files() {
    local file="$1"
    local backup_file="${file}.docker-backup"
    
    # Create backup
    cp "$file" "$backup_file"
    
    # Update compose file for podman compatibility
    # Remove Docker-specific options that aren't supported in podman-compose
    sed -i '' '/restart: unless-stopped/d' "$file"
    
    # Update health checks to use podman format
    sed -i '' 's/test: \["CMD", "curl"/test: ["CMD-SHELL", "curl"/g' "$file"
    
    log_info "Updated compose file $file (backup: $backup_file)"
}

# Function to update Dockerfiles for podman
update_dockerfiles() {
    local file="$1"
    local backup_file="${file}.docker-backup"
    
    # Create backup
    cp "$file" "$backup_file"
    
    # Add podman-specific optimizations
    # No major changes needed as Dockerfile format is compatible
    
    log_info "Dockerfile $file is compatible with podman (backup: $backup_file)"
}

# Main migration function
main() {
    log_info "Starting Docker to Podman migration..."
    
    # Get the project root directory
    PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
    cd "$PROJECT_ROOT"
    
    log_info "Project root: $PROJECT_ROOT"
    
    # Update shell scripts
    log_info "Updating shell scripts..."
    find . -name "*.sh" -type f | while read -r file; do
        if grep -q "docker" "$file"; then
            replace_docker_commands "$file"
        fi
    done
    
    # Update Python scripts
    log_info "Updating Python scripts..."
    find . -name "*.py" -type f | while read -r file; do
        if grep -q "docker" "$file"; then
            replace_docker_commands "$file"
        fi
    done
    
    # Update compose files
    log_info "Updating compose files..."
    find . -name "*compose*.yml" -o -name "*compose*.yaml" -type f | while read -r file; do
        update_compose_files "$file"
    done
    
    # Update Dockerfiles
    log_info "Updating Dockerfiles..."
    find . -name "Dockerfile*" -type f | while read -r file; do
        update_dockerfiles "$file"
    done
    
    # Update GitHub Actions
    log_info "Updating GitHub Actions workflows..."
    find .github -name "*.yml" -o -name "*.yaml" -type f 2>/dev/null | while read -r file; do
        if grep -q "docker" "$file"; then
            replace_docker_commands "$file"
        fi
    done
    
    # Update documentation
    log_info "Updating documentation..."
    find . -name "*.md" -type f | while read -r file; do
        if grep -q "docker" "$file"; then
            replace_docker_commands "$file"
        fi
    done
    
    # Update package.json files
    log_info "Updating package.json files..."
    find . -name "package.json" -type f | while read -r file; do
        if grep -q "docker" "$file"; then
            replace_docker_commands "$file"
        fi
    done
    
    # Create podman-specific scripts
    log_info "Creating podman-specific scripts..."
    
    # Rename docker-specific scripts
    if [ -f "scripts/start-docker.sh" ]; then
        mv "scripts/start-docker.sh" "scripts/start-podman.sh"
        log_info "Renamed start-docker.sh to start-podman.sh"
    fi
    
    # Update the renamed script
    if [ -f "scripts/start-podman.sh" ]; then
        replace_docker_commands "scripts/start-podman.sh"
        
        # Update script content for podman
        sed -i '' 's/Docker Desktop/Podman/g' "scripts/start-podman.sh"
        sed -i '' 's/Docker/Podman/g' "scripts/start-podman.sh"
        sed -i '' 's/\/Applications\/Docker\.app/\/Applications\/Podman Desktop.app/g' "scripts/start-podman.sh"
    fi
    
    log_success "Docker to Podman migration completed!"
    log_info "Backup files created with .docker-backup extension"
    log_warning "Please test the migrated configuration before removing backup files"
    
    # Show summary
    echo ""
    log_info "Migration Summary:"
    echo "  - Shell scripts updated"
    echo "  - Python scripts updated"  
    echo "  - Compose files updated"
    echo "  - Dockerfiles verified compatible"
    echo "  - GitHub Actions updated"
    echo "  - Documentation updated"
    echo "  - Package.json files updated"
    echo "  - start-docker.sh renamed to start-podman.sh"
    echo ""
    log_info "Next steps:"
    echo "  1. Test podman functionality: podman run hello-world"
    echo "  2. Test compose functionality: podman-compose --version"
    echo "  3. Run container tests: ./scripts/test-containers.sh"
    echo "  4. Remove backup files when satisfied: find . -name '*.docker-backup' -delete"
}

main "$@"
